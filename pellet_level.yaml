esphome:
  name: pellet-controller
  platform: ESP8266
  board: esp12e

wifi:
  ssid: !secret wifi_ap
  password: !secret wifi_password
  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "Pellet level"
    password: ""

web_server:
  port: 80
  auth:
    username: admin
    password: !secret admin_pass

mqtt:
  broker: !secret mqtt_broker
  client_id: pellet_mon2
  username: boilerroom
  password: MyMQTTPassword
  discovery: true

captive_portal:

# Enable logging
logger:
  level: DEBUG
  logs:
    mqtt.component: DEBUG
    mqtt.client: ERROR
# Enable Home Assistant API
#api:

ota:
  safe_mode: true
  password: !secret admin_pass
  id: katilas_mon2
  on_begin:
    then:
      - logger.log: "OTA start"
  on_progress:
    then:
      - logger.log:
          format: "OTA progress %0.1f%%"
          args: ["x"]
  on_end:
    then:
      - logger.log: "OTA end"
  on_error:
    then:
      - logger.log:
          format: "OTA update error %d"
          args: ["x"]



text_sensor:
  - platform: template
    name: "Pellet Controller Uptime Human Readable"
    id: uptime_human
    icon: mdi:clock-start

sensor:
  - platform: ultrasonic
    trigger_pin: GPIO5
    echo_pin: GPIO4
    name: "pellet level in percent"
    update_interval: 60s
# Optional variables:
    icon: "mdi:sack-percent"
    accuracy_decimals: 0      
    filters:
    # Calculates in %
    # Replace 0.46 by the height of hopper. From the sensor to the bottom.
    # I used this website to know how I should multiply my values :https://www.skillsyouneed.com/num/percent-change.html 
    - lambda: return (0.85-x)*(100/0.85);
    unit_of_measurement: "%"
    
  - platform: ultrasonic
    trigger_pin: GPIO5
    echo_pin: GPIO4
    name: "pellet level in cm"
    update_interval: 60s
# Optional variables:
    icon: "mdi:sack-percent"
    #accuracy_decimals: 0    
    pulse_time: 20us
    filters:
    # Replace the 0.46 by the height of hopper. From the sensor to the bottom.
    # I multiplied by 100 in order to get CM since the sensor works in meters
    - lambda: return (0.85-x)*100;
    unit_of_measurement: "cm"
  - platform: dallas
    name: "virsus"
    address: "0x1A03049779621C28"
  - platform: dallas
    name: "pavara"
    address: "0x5D03049779691D28"
  - platform: dallas
    name: "i kolektoriu"
    address: "0xB403049779B25B28"
  - platform: dallas
    name: "is kolektoriaus"
    address: "0x9903049779D1AB28"
  - platform: uptime
    name: "Pellet controller Uptime"
    id: uptime_sensor
    update_interval: 60s
    on_raw_value:
      then:
        - text_sensor.template.publish:
            id: uptime_human
            state: !lambda |-
              int seconds = round(id(uptime_sensor).raw_state);
              int days = seconds / (24 * 3600);
              seconds = seconds % (24 * 3600);
              int hours = seconds / 3600;
              seconds = seconds % 3600;
              int minutes = seconds /  60;
              seconds = seconds % 60;
              return (
                (days ? String(days) + "d " : "") +
                (hours ? String(hours) + "h " : "") +
                (minutes ? String(minutes) + "m " : "") +
                (String(seconds) + "s")
              ).c_str();
     
dallas:
  - pin: GPIO14
    update_interval: 60s
